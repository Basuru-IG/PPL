Program([ClassDecl(Id(ComplexMath),[MethodDecl(Id(power),[Param(Id(x),FloatType),Param(Id(n),IntType)],FloatType,Block([If(BinaryOp(==,Id(n),IntLit(0)),Block([Return(FloatLit(1.0))])),If(BinaryOp(==,BinaryOp(%,Id(n),IntLit(2)),IntLit(0)),Block([VarDecl(Id(halfPower),FloatType,CallExpr(Self(),Id(power),[Id(x),BinaryOp(/,Id(n),IntLit(2))])),Return(BinaryOp(*,Id(halfPower),Id(halfPower)))]),Block([Return(BinaryOp(*,Id(x),CallExpr(Self(),Id(power),[Id(x),BinaryOp(-,Id(n),IntLit(1))])))]))])),MethodDecl(Id(fibonacci),[Param(Id(n),IntType)],IntType,Block([If(BinaryOp(==,Id(n),IntLit(0)),Block([Return(IntLit(0))])),If(BinaryOp(==,Id(n),IntLit(1)),Block([Return(IntLit(1))])),VarDecl(Id(a),IntType,IntLit(0)),VarDecl(Id(b),IntType,IntLit(1)),For(AssignStmt(Id(i),IntLit(2)),BinaryOp(<=,Id(i),Id(n)),AssignStmt(Id(i),BinaryOp(+,Id(i),IntLit(1))),Block([VarDecl(Id(next),IntType,BinaryOp(+,Id(a),Id(b))),AssignStmt(Id(a),Id(b)),AssignStmt(Id(b),Id(next))])]),Return(Id(b))]))])])